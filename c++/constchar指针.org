* const char *
对于 const char * ptr 来说, 到底 ptr 指针本身不能改变,还是执行ptr执行的指不能改变呢?
** 网上的资料上看,有如下的解
 Bjarne在他的The C++ Programming Language里面给出过一个助记的方法： 
 把一个声明从右向左读。 
 char  * const cp; ( * 读成 pointer to ) 
 cp is a const pointer to char --->cp是一个指向字符char的固定指针

 const char * ptr; 
 ptr is a pointer to const char; --->ptr是一个指向固定字符char的指针

 char const * p; --->无此形式

 也就是说,  cp 和 ptr 都是指针, cp的值是不可变的 , cp指向的内容是可变的;
而 ptr的值是可以变化的,ptr指向的内容是不可变的.


|     | 指针的只是否可变    | 指向的值是否可变 |
|-----+------------------+------------------|
| cp  | n                | n                |
| ptr | y                | n                |
** 先说 const char *ptr 
写的如下的程序
#+BEGIN_SRC c++
  #include <iostrean>

  using namespace std;
  int check_ip(void)
  {
    const char *ptr = 'hello';

    while(*ptr != '\0')
      {
        std::cout << ptr << endl
          ptr++;
      }
    return 0;
  }

  int main(int argc, char *argv[])
  {
    int nRet;
    nRet = check_ip();
  
    return 0;
  }

#+END_SRC
预计写一个检测点分制ip是否合法的函数,我们先说明ptr,之后再改成要的形式:

现在这个函数要验证的就是对一个const char *形式的指针,指针本身的值是否可以改变,只做这一点,问题分析就要一点一点的来,不要有干扰.编译并执行:


这说明 const char * 形式的指针的地址是可以改变的.值的部分我下面验证.



无论test我生命为const char *还是 char *,都是提示一样的警告,运行的时候就产生了段错误.这就是说对编译产生的警告一定不要放过,不要以为能够生成可执行文件的程序就是正确的,事实上,只有那种unused的警告可以忽略,其他的都不要放过.
** 再说 char * const ptr

编译的时候就直接出错,原因也说的很清楚,定指针不能改变自己的值,当然也不能自加;

VC解释的很清除,就是说内存中的地址不能为write,也就是说ptr不仅仅是地址不能改变,连指向的值也是不能改变的.这下也基本明白了为什么那么多windows程序都会出现这个提示框了,对const理解的不深入啊,杯具~~,使用memcpy也是一致的,就不在截图了
** 总结
在socket编程中经常会用到点分制ip和unsigned long形式的ip,那么判断其有效性是提高程序健壮性的必要条件,下面只对点分制的进行判断,unsigned long形式的是系统函数生成的,inet_addr,所以无需我来担心.


* 参考

http://blog.csdn.net/scarlettsp/article/details/5949415
