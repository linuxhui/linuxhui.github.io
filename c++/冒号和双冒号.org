* 冒号的用法
** 在结构体中表示位域的定义
即该变量占用几个bit空间

#+BEGIN_SRC c++
  typedef struct _XXX
  {
    unsigned char a:4;
    unsigned char c;
  }; 
#+END_SRC

** 构造函数后面的冒号起分割作用
类给成员变量复制的方法， 初始化列表，更适用于成员变量的常量const型。

#+BEGIN_SRC c++
  struct _xxx
  {
    _xxx(): y(0xc0){}
  };
#+END_SRC

** public: 和 private: 后面的冒号
表示后面定义的成员都是公有或私有的，直到 下一个 "puiblic:" 或者 "private:" 出现为止。
默认位 "private:"

** 类名冒号后面的是用来定义类的继承

#+BEGIN_SRC c++
  class 派生类名 : 继承方式 基类名

  {

    派生类的成员

  };

#+END_SRC


继承方式：public、private和protected，默认处理是public。

* 双冒号的用法

** 表示 ”域操作符”
例： 声明了一个类A， 类A里声明了一个成员函数 void f()， 但是没有在类的声明中给出 f 的定义， 那么在类外定义 f 时，
就要写成 void A::f(), 表示 f() 函数时 A 的成员函数。

** 直接在全局函数前，表示是全局函数
例如： 在VC里， 你可以在调用API 函数里，在API 函数名前加：：

** 表示引用成员函数及变量，作用域成员运算符
例: System::Math::Sqrt() 相当于System.Math.Sqrt()

