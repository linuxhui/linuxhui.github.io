* js

** 函数 
创建匿名函数的语法格式
#+BEGIN_EXAMPLE
  var variable = new Function("param1", "param2",....,"paramn", "function body");
#+END_EXAMPLE

第一个参数时再盛名式函数时指定的第一个参数。最后一个参数时函数体。整个函数被赋予一个变量。

** 事件
W3C将事件分为3种不同的类型: 用户界面事件(鼠标，键盘触发的),逻辑事件(一个处理的结果)和变化事件(修改文档的操作).

| 事件                          | 描述                   | 受影响的对象                                     |
|-------------------------------+------------------------+--------------------------------------------------|
| abort                         | 当图像被禁止载入时     | 图像元素                                         |
| blur，focus                   | 当对象失去或获得焦点时 | 适用于window和表单元素                           |
| change                        | 当选择项发生变化时     | 适用于表单元素，当该元素失去焦点后，值发生了变化 |
| click，doubleclick(dblclick） | 单击鼠标，双击(快速连续点击两次)鼠标    | 绝大多数页面元素                                         |
| contextmenu                   | 单击鼠标右键(调出右键快捷菜单)                        | web页面文档                                                  |
| error                         | 当页面或图像无法载入时                                           | Web页面文档和图像                                                   |
| keydown，keyup,keypress        | 按下一个键，松开一个键，按下后再松开一个键                                            | web页面文档和特定的表单元素                                                     |
| load，unload                    | 当图像或页面载入完成时，页面失去焦点                                                                    | web页面文档和图像(仅限于载入)                                                               |
| mousedown,mouseup               | 将鼠标移到某个元素上面，将鼠标从某个元素上移开                                                                                 | 绝大多数页面元素                                                                                    |
| reset                           | 表单被重新设置                                                                                                                        | 针对表单                                                                                                |
| select                          | 选中某个文本                                                                                                                                | 表单文字输入框                                                                                                 |
| scroll                          | 当对象收到滚动操作时                                                                                                                                  | 窗口、帧，或者超出自动设置的高度或宽度范围的对象(这时候将显示出滚动条)                                                                           |
| submit                          | 表单已提交                                                                                                                                                 | 针对表单                                                                                                                                             |

事件句柄的名称只是在事件名称的前面加上一个前缀"on",如：onload，onblur，onsubmit等。

IE将Event视为window对象的属性。当处理事件时，将通过程序访问window对象。其所包含的数据也会相应的进行填充。不过在其他的浏览器中可能出错。

在event提供的属性中，以下是跨浏览器兼容的：
#+BEGIN_EXAMPLE
  1. altkey 布尔值，用来表示事件触发时，alt键是否被按下
  2. clientX 事件触发时客户端的当前x坐标
  3. clientY 事件触发时客户端的当前y坐标
  4. ctrlKey 布尔值，用来表示事件触发时Ctrl键是否被按下
  5. keyCode 当前按键的代码(数字）、
  6. screenX 事件触发时屏幕的x坐标
  7. screenY 事件触发时屏幕的Y坐标
  8. shiftKey 布尔值，用来表示事件触发时Shift键是否被按下
  9. type 事件类型
#+END_EXAMPLE

** DOM Level 2 事件模型
和DOM Level 0 的主要区别在于：
#+BEGIN_EXAMPLE
  1. 新事件模型并不依赖于特定的事件来处理属性;
  2. 你可以对任何一个对象的任何一种事件注册多个事件句柄函数。
#+END_EXAMPLE

用来代替事件句柄属性的时每个对象提供了3个方法：addEventListener，removeEventListener和dispatchEvent。

第一个方法用来添加一个时加监听器，第二个用来删除一个事件监听器，第三个用来分发一个新的事件。

*** addEventListener 的语法是：
#+BEGIN_EXAMPLE
  object.addEventListener('event', eventFunction, boolean);
#+END_EXAMPLE
如click 或 load之类的事件时其第一个参数;第二个参数是指定的事件句柄函数，第三个参数是用来指定事件cascade-down模式或冒泡模式处理的。

** 表单
在将表单提交到服务器之前，有3种的拦截的方式：使用内嵌的事件句柄捕获submit事件；使用传统的事件句柄捕获该事件；使用更现代的addEventListener/attachEvent方法捕获该事件

*** 表单添加事件：不同方法
与表单关联的主要事件是submit，其事件句柄是onsubmit。
+ 传统的方法为表单添加该事件句柄的方法：
  #+BEGIN_EXAMPLE
    document.getElementByID("someform").onsubmit = formHandler;
  #+END_EXAMPLE

** 选择列表框
select(选择列表框)元素和其相关的选项为用户提供了从一个列表中选择一项或多项的方法。

select元素提供了以下属性，它们都可以通过JavaScript访问：
+ disabled 该元素是否被禁用
+ form 其包含的表单
+ length 选项数组中包含的选项数
+ options 选项数组
+ selectedIndex 对于单选框，那么它的值就是当前选中的项目编号；对于多选框元素，那么它的值就是选中的第一个值
+ type 元素类型


对于表单验证，我们感兴趣的只有selected，value和text。
+ selected 该选项是否被选中
+ value  选项的值
+ text  web页面上呈现的内容










** DOM 

*** 节点层次 

*** 节点操作

**** appendChild()
用于向childNodes列表的末尾添加一个节点。添加节点后，chilidNodes的新增节点，父节点以及最后一个节点的值朕都会相应地得到更新。返回新增的节点
#+BEGIN_EXAMPLE
  var returnednode = someNode.appendChild(newNode);
  alert(returnedNode == newNode); //True
  alert(someNode.lastChild == newNode); //True
#+END_EXAMPLE

*Note:* 如果传入到appendChild()中的节点已经是文档的一部分了，那结果就是将节点从原来的位置转移到新的位置。
#+BEGIN_EXAMPLE
  // someNode 有多个节点
  var returnedNode = someNode.appendChild(someNode.firstChild);
  alert(returnedNode ==  someNode.firstChild);  //false 已经更改
  alert(returnedNode == someNode.lastChild);   //true 
#+END_EXAMPLE

**** insertBefore()
把节点放到childNodes列表中某个特定的位置上。

这个方法接受两个参数:要插入的节点和作为参照的节点。插入节点后，被插入的节点会编程参照节点的迁移个同胞节点(previousSibling),同时被方法返回。如果参照节点是Null，则insertBefore() 和 appendChild()执行相同的操作。

#+BEGIN_EXAMPLE
  // 插入后成为最后一个子节点
  returnedNode = someNode.insertBefore(newNode,null);
  // 插入后成为第一个子节点
  var returnedNode = someNode.insertBefore(newNode, someNode.firstChild);
  // 插入到最后一个子节点前面
  returnedNode = someNode.insertBefore(newNode, someNode.lastChild);
#+END_EXAMPLE

**** replaceChild()
接受两个参数：要插入的节点 和要替换的节点。要替换的节点将由这个方法返回并从文档树中被移除。同时由要插入的节点占据其位置。

#+BEGIN_EXAMPLE
  //替换第一个子节点
  var returnedNode = someNode.replaceChild(newNode,someNode.firstChild);

  // 替换最后一个子节点
  returnedNode = someNode.replaceChild(newNode, someNode.lastChild);
#+END_EXAMPLE

**** removeChild()
接受一个参数，即要移除的节点。被移除的节点将成为方法的返回值。

#+BEGIN_EXAMPLE
  // 移除第一个子节点
  var formerFirstChild = someNode.removeChild(someNode.firstChild);

  // 移除最后一个子节点
  var formerLastChild = someNode.removeChild(someNode.lastChild);
#+END_EXAMPLE

**** cloneNode()
用于创建调用这个方法的节点的一个完全相同的副本。接受一个布尔值，表示是否执行深复制。参数为true时进行深复制，也就是复制节点及其整个子节点树；在参数为false的情况下，执行浅复制，即只复制节点本身。

*Note* 复制返回的节点副本属于文档所有，但并没有为它指定父节点。因此这个节点副本本身成为了一个孤儿。除非通过appendChild(),insertBefore()或replaceChild()将它添加到文档中。

**** normalize()
先不讨论

*** Document类型
JavaScript通过Document类型表示文档。在浏览器中，document对象时HTMLDocument(继承自Document类型)的一个实例),表示整个HTML页面。

Document节点具有下列特征:
+ nodeType 的值为 9；
+ nodeName 的值为 "#document";
+ nodevalue 的值为 null;
+ parentNode 的值为 null;
+ ownerDocument 的值为 null;
+ 其子节点可能时一个DocumentType(最多一个),Element(最多一个),ProcessingInstruction 或 Comment。

**** 常用形式
document.documentElement 指向 <html>元素
document.body 指向<body>

其他不常用的属性：
document.title  
// 取得完整的URL 
document.URL 
// 取得域名
document.domain  
// 取得来源页面的URL
document.referrer





**** 查找元素
Document 类型为此提供了两个方法： getElementById() 和 getElementsByTagName()

***** getElementById()
接收一个参数：要取得的元素的 ID。如果找到相应的元素则返回该元素，如果不存在带有相应ID的元素，则返回null.

***** getElementsByTagName()
接收一个参数，即要取得元素的标签名，而返回的时包含0个或多个元素的NodeList。在html文档中，这个方法会返回一个HTMLCollection。

#+BEGIN_EXAMPLE
  取得页面的所有<img> 元素，并返回一个HTMLCollection
  var images = document.getElementByTagName(*img*);
  alert(images.length)  // 输出图像的数量
  alert(images[0].src)  // 输出第一个i图形昂元素的src特性
  alert(images.item(0).src)   // 输出第一个图像元素的src特性

  namedItem() 可以使用这个方法通过元素的 name特性取得集合中的项。

  <img src="myimage.gif" name="myImage">
  那么就可以通过下列方式从images变量中取得这个<img>元素
  var myImage = images.namedItem("myImage");
#+END_EXAMPLE

***** getElementsByName()
返回带有给定name特性的所有元素。 最常使用getElementsByName()方法的情况时取得单选按钮

***** 特殊集合
这些集合都是HTMLCollection对象，为访问文档常用部分提供了快捷方式。
+ document.anchors, 包含文档中所有带 name特性的<a> 元素
+ document.forms， 包含文档中所有的 <form> 元素
+ document.images， 包含文档中的所有<img> 元素
+ document.images, 包含文档中所有带href 特性的<a> 元素。

***** 文档写入
write()  写入到输出流的文本中
writeln() 写入到输出流的文本中 + '\n'
open()  用于打开网页的输出流
close() 用于关闭网页的输出流

*** Element 类型
除了Document类型之外，Element类型就要算是web编程中最常用的类型了。Element类型用于表现XML或HTML元素，提供了对元素标签名，子节点以及特性的访问。

Element节点具有以下特征：
+ nodeType 的值为1；
+ nodeName 的值为元素的标签名；
+ nodeValue的值为null;
+ parentNode 可能时 Document 或 Element;
+ 其子节点可能是Element、Text、Comment、ProcessingInstruction、CDATASection 或 EntityReference

**** html元素
所有的HTML元素都是由HTMLElement类型表示，不是通过这个类型，而是通过




