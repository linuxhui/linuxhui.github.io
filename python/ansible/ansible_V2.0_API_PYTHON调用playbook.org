
* 简介
在ansible2.0之后， pythonAPI的调用方式和之前有很大的不同，具体可以参考官网的PYTHON_API。 官网给出了play的调用方式，没有playbook的调用方式。自己在这里简单写了一个。
* 代码实现
#+BEGIN_SRC python
  # coding: utf-8

  """
  @version: ??
  @author: wangshuaihui
  @license: Apache Licence 
  @time: 16-7-18 下午1:37
  @content: test
  """
  import json
  from collections import namedtuple
  from ansible.parsing.dataloader import DataLoader
  from ansible.vars import VariableManager
  from ansible.inventory import Inventory
  from ansible.executor.task_queue_manager import TaskQueueManager
  from ansible.plugins.callback import CallbackBase
  from ansible.executor.playbook_executor import PlaybookExecutor


  # 回调脚本用来实现每一个playbook提前和事后处理
  class ResultCallback(CallbackBase):
      """A sample callback plugin used for performing an action as results come in

      If you want to collect all results into a single object for processing at
      the end of the execution, look into utilizing the ``json`` callback plugin
      or writing your own custom callback plugin
      """
      def v2_runner_on_ok(self, result, **kwargs):
          # 获取输出日志进行处理
          """Print a json representation of the result

          This method could store the result in an instance attribute for retrieval later
          """
          host = result._host
          print json.dumps({host.name: result._result}, indent=4)

      def playbook_on_task_start(self, name, is_conditional):
          # 任务启动的时候的加载项
          print "qq1"


  # 设置命令选项
  Options = namedtuple('Options', ['listtags', 'listtasks', 'listhosts', 'syntax', 'connection','module_path', 'forks', 'remote_user', 'private_key_file', 'ssh_common_args', 'ssh_extra_args', 'sftp_extra_args', 'scp_extra_args', 'become', 'become_method', 'become_user', 'verbosity', 'check'])
  options = Options(listtags=False, listtasks=False, listhosts=False, syntax=False, connection='ssh', module_path=None, forks=100, remote_user='slotlocker', private_key_file=None, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=True, become_method=None, become_user='root', verbosity=None, check=False)


  # 变量管理
  variable_manager = VariableManager()
  loader = DataLoader()

  passwords = dict(vault_pass='secret')

  # 回调处理
  results_callback = ResultCallback()

  # 使用系统的inventory
  inventory = Inventory(loader=loader, variable_manager=variable_manager, host_list='/etc/ansible/hosts')
  variable_manager.set_inventory(inventory)

  tqm = None
  try:
      pbex = PlaybookExecutor(playbooks=['/etc/ansible/test.yaml'], inventory=inventory,
                              variable_manager=variable_manager, loader=loader, options=options, passwords=passwords)
      tqm = TaskQueueManager(inventory=inventory, variable_manager=variable_manager,
                                   loader=loader, options=options, passwords=passwords, stdout_callback=results_callback)
      pbex._tqm = tqm
      results = pbex.run()
  finally:
      if tqm is not None:
          tqm.cleanup()

#+END_SRC

* 参考文献



