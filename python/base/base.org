* 自省函数
** getattr(object, name[, default])
Return the value of the named attribute of object. name must be a string. If the string is the name of one of the object’s attributes, the result is the value of that attribute. For example, getattr(x, 'foobar') is equivalent to x.foobar. If the named attribute does not exist, default is returned if provided, otherwise AttributeError is raised.

返回object的name属性的值，name必须是一个字符串。例如 getattr(x,'foobar')相当于x.foobar
** setattr()





* python的内建函数

** dir([object])
如果没有参数，则返回当前的局部作用域的名字。带有一个参数，尝试返回这个对象的所有可用的属性。



* 装饰器

** 如何编写一个装饰器
编写自定义装饰器有很多的方法，但最简单和最容易理解的方法是编写一个函数，返回原始函数调用的一个子函数。

通用的模式如下：
#+BEGIN_EXAMPLE
  In [8]: def mydecorator(function):
     ...:     def _mydecorator(*args, **kw):
     ...:         # 在调用实际函数之前做些填充工作
     ...:         res = function(*args, **kw)
     ...:         # 做完之后的填充工作
     ...:         return res
     ...:    return _mydecorator

#+END_EXAMPLE

当装饰器需要参数时，必须使用第二级封装：
#+BEGIN_EXAMPLE
    In [8]: def mydecorator(arg1,arg2):
       ...:     def _mydecorator(function):
       ...:         def __mydecorator(*args, **kw):
       ...:             # 在调用实际函数之前做些填充工作
       ...:             res = function(*args, **kw)
       ...:             # 做完之后的填充工作
       ...:             return res
       ...:         return __mydecorator
       ...:    return _mydecorator

#+END_EXAMPLE

*NOTE*: 装饰器应该关注于所封装的函数或方法接收和返回的参数。如果需要，应该尽可能限制其内省(introspection)工作。

常见的装饰器模式包括：
+ 参数检查;
+ 缓存;
+ 代理;
+ 上下文提供者。



** 参数检查
检查函数接收或返回的参数，在特定上下文执行时可能有用。

参数检查装饰器有许多其他使用场景。如类型强制，可以根据给定的全局配置值来定义多种级别的类型检查：
+ 什么也不检查
+ 检查器仅弹出警告
+ 检查器将抛出TypeError异常。

** 缓存
缓存装饰器和参数检查很相似，不过它关注于内部状态而不影响输出的函数。每组参数可以链接到一个唯一结果上。这种编程风格时函数型编程的特性，当输入值有限时可以使用。

缓存装饰器可以将输出与计算它所需的参数放在一起，并且直接在后续的调用中返回它。这种行为被成为 *Memoizing* 很容易被实现为一个装饰器。
#+BEGIN_SRC python
  import time
  import hashlib
  import pickle
  from itertools import chain

  cache = {}

  def is_obsolete(entry, duration):
      return time.time() - entry['time'] > duration

  def compute_key(function, args,kw):
      key = pickle.dumps((function.func_name, args, kw))
      return hashlib.sha1(key).hexdigest()


  """
  SHA hash键值使用已排序的参数值建立，该结果将保存在一个全局字典中。hash使用一个pickle来建立，这是冻结所有参数传递的对象状态，以确保所有参数均为良好候选者的一个快捷方式。例如,如果一个线程或套结字被用作一个参数，将抛出PicklingError。
  duration参数用于在上次函数调用之后，使存在太久的缓存值失效。
  """
  def memoize(duration = 10):
      def _memozie(function):
          def __memozie(*args,**kw):
              key = compute_key(function, args, kw)

              # 是否已经拥有它了？
              if (key in cache and not is_obsolete(cache[key],duration)):
                  print "We got a winner"
                  return cache[key]['value']

              # 计算
              result = function(*args, **kw)

              # 保存结果
              cache[key] = {'value': result,
                            'time':time.time()}
              return result
          return __memozie
      return _memozie

  @memoize()
  def very_very_very_complex_stuff(a,b):
      # 如果执行该计算会让计算机过热，请考虑停止它
      return a + b

  @memoize(1) # 1s后缓存失效
  def very_complex_stuff(a, b):
      return a + b

  def main():
      print very_very_very_complex_stuff(2, 2)
      print very_very_very_complex_stuff(2, 2)
      print very_complex_stuff(2,2)
      print cache
      time.sleep(2)
      print very_complex_stuff(2,2)
      print cache

  if __name__ == "__main__":
      main()

#+END_SRC


** 代理
代理装饰器使用一个全局机制来标记和注册函数。例如： 一个根据当前用户保护代码访问的安全层可以使用一个集中检查器和相关的可调用对象要求的权限来实现。

#+BEGIN_SRC python
  class User(object):
      def __init__(self,roles):
          self.roles = roles

  class unauthorized(Exception):
      pass

  def protect(role):
      def _protect(function):
          def __protect(*args, **kw):
              user = globals().get('user')
              if user is None or role not in user.roles:
                  raise Unauthorized("I won't tell you")
              return funtion(*args, **kw)
          return __protect
      return _protect
#+END_SRC


这种模式常常应用于Python Web框架，用来定义针对可发布类的安全性。例如，Django提供装饰器来保障函数访问的安全。

下面是一个实例，当前用户被保存在一个全局变量中。装饰器在方法被访问时，检查其角色。

#+BEGIN_SRC python

  tarek = User(('admin','user'))
  bill = User(('user',))

  class MySecrets(object):
      @protect('admin')
      def waffle_recipe(self):
          print 'use tons of buffer!'

  these_are = MySecrets()
  user = tarek
  print these_are.waffle_recipe()
  use = bill
  these_are.waffle_recipe()
#+END_SRC


** 上下文提供者
上下文装饰器用来确保函数可以运行在正确的上下文中，或者函数前后执行一些代码。换句话说，它用来设置或者复位特定的执行环境。例如：当一个数据项必须与其他线程共享时，就需要使用一个锁来确保它在多重访问时得到保护。这个锁可以在一个装饰器中编写，示例如下：

* class(类)

** 描述符
描述符用来定义在引用一个对象上的特性时所应该完成的时候。

描述符时Python中复杂特性访问的基础。它们在内部使用，以实现属性，类，静态方法和super类等。它们时定义另外一个类特性可能的访问方式的类。换句话说，一个类可以委托另一个类来管理其特性。

描述符类基于三个必须实现的特殊方法：
+ __set__ 在任何特性被设置的时候调用，在后面的实例中，将称其为setter；
+ __get__ 在任何特性被读取的时候调用(被成为getter)
+ __delete__ 在特性上请求del时调用

这些方法将在__dict__特性之前被调用

 
* callable
A callable is anything that can be called.

The built-in callable(PyCallable_Check in objects.c) checks if the argument is either:
+ an instance of a class with a __call__ method or
+ is of a type that has a non null tp_call(c struct) member which indicates callability otherwise (such as in functions, methods etc.)

The method named __call__ is:
#+BEGIN_EXAMPLE
  Called when the instance is "called" as a function
#+END_EXAMPLE

#+BEGIN_SRC python
  class Foo:
      def __call__(self):
          print 'called'

  foo_instance  = Foo()
  foo_instance() # this is calling the __call__ method
#+END_SRC




