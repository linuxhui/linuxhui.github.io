#+TITLE： Python程序执行原理
* 挖井人
+ [[http://tech.uc.cn/?p%3D1932][UC：Python程序的执行原理]]
* 过程概述
Python先把代码(.py文件)编译成字节码，交给字节码虚拟机，然后虚拟机一条一条的执行字节码指令，从而完成程序的执行

* 字节码
字节码在Python虚拟机程序里，对应的是PyCodeObject对象
pyc文件是字节码在磁盘上面的表现形式

* pyc文件
PyCodeObject对象的创建时机是模块加载的时候，即import
Python test.py 会对test.py进行编译成字节码并解释执行,但是不生成pyc文件
如果test.py加载了其他模块，如 import xxx，则Python会对xxx.py进行编译成字节码文件，生成XXX.pyc，然后对字节码解释执行。
如果想生成test.pyc，我们可以使用Python内置模块 Py_complile来编译
加载模块时，如果同时存在.py 和  .pyc , Python，如果.pyc的编译时间早于.py的修改时间，则重新编译.py 并更新pyc。

* PyCodeObject 

#+BEGIN_SRC c
  typedef struct {
      PyObject_HEAD
      int co_argcount;        /* 位置参数个数 */
      int co_nlocals;         /* 局部变量个数 */
      int co_stacksize;       /* 栈大小 */
      int co_flags;   
      PyObject *co_code;      /* 字节码指令序列 */
      PyObject *co_consts;    /* 所有常量集合 */
      PyObject *co_names;     /* 所有符号名称集合 */
      PyObject *co_varnames;  /* 局部变量名称集合 */
      PyObject *co_freevars;  /* 闭包用的的变量名集合 */
      PyObject *co_cellvars;  /* 内部嵌套函数引用的变量名集合 */
      /* The rest doesn’t count for hash/cmp */
      PyObject *co_filename;  /* 代码所在文件名 */
      PyObject *co_name;      /* 模块名|函数名|类名 */
      int co_firstlineno;     /* 代码块在文件中的起始行号 */
      PyObject *co_lnotab;    /* 字节码指令和行号的对应关系 */
      void *co_zombieframe;   /* for optimization only (see frameobject.c) */
  } PyCodeObject;
#+END_SRC

* pyc文件格式
加载模块时，模块对应的PyCodeObject对象被写入pyc文件，格式如下：
#+CAPTION: pyc文件
| MAGIC              | long  | magic code,用来区分不同版本的Python                                    |
| MTIME              | long  | 修改时间                                                               |
| TYPE_CODE          | byte  | 表示这是一个PyCodeObject对象                                           |
| co_argcount        | long  | 对应PyCodeObject结构体里面的各个域                                     |
| co_nlocals         | long  |                                                                        |
| co_stacksize       | long  |                                                                        |
| co_flags           | long  |                                                                        |
| TYPE_STRING        | byte  | 字符串的表示方法，对应PyCodeObject的co_code                            |
| co_code size       | long  |                                                                        |
| co_code value      | bytes |                                                                        |
| TYPE_LIST          | bytes | 这是一个列表                                                           |
| co_consts soze     | long  | 列表co_consts的元素个数                                                |
| Type_INT           | byte  | co_consts[0]是一个整型                                                 |
| co_consts[9]       | long  |                                                                        |
| TYPE_STRING        | byte  | co_consts[1] 是一个字符串                                              |
| co_consts[1] size  | long  |                                                                        |
| co_consts[1] value | bytes |                                                                        |
| TYPE_CODE          | byte  | co_consts[2]居然又是一个PyCodeObject，它对应的代码可能是一个函数或者类 | 


* 分析字节码

** 分析PycodeObject 
Python 提供了内置compile可以编译Python代码和查看PyCodeObject对象。如下：
#+BEGIN_SRC python
  s = "hello"

  def func():
      print s

  fun()
#+END_SRC

在Python交互式shell里编译得到PycodeObject对象：



dir(co)已经列出co的各个域，想查看某个域可以直接在终端输出即可：



test.py的PyCodeObject

Python解释器会为函数生成的字节码PyCodeObject对象，见上面的co_consts[1]


co_code是指令序列，是一串二进制流，它的格式和解析方法见6.2。


** 解析指令序列
指令序列co_code的格式
| opcode | oparg   | opcode | opcode | oparg   | ... |
|--------+---------+--------+--------+---------+-----|
| 1 byte | 2 bytes | 1 byte | 1 byte | 2 bytes |     |


python 内置的dis模块可以解析co_code,如下图:



func函数的指令序列




第一列表示一下几个指令在py文件中的行号
第二列表示该指令在指令序列co_code里面的偏移量
第三列是指令opcode的名称，分为有操作数和无操作数两种，opcode在指令序列中是一个字节的整数；
第四列是操作数oparg，在指令序列中占用两个字节，基本上都是co_consts或者co_names的下标;
第五列带括号的是操作数说明。
